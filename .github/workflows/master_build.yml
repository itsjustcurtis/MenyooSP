name: Master_Build

on:
  push:
    branches: [ "main", "Development", "Feature_ImprovedMasterBuild"]
  #workflow_run:
  #  workflows: ["MSBuild"]
  #  types:
  #    - completed
      


env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: ./Solution/Menyoo.sln

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: write

jobs:
  check-version-and-merge:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract version from macros.h
        id: extract_version
        run: |
          VERSION=$(grep '#define MENYOO_CURRENT_VER_' Solution/source/macros.h | awk '{print $3}' | tr -d '"')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"
      
      - name: Debug regex checks
        run: |
          VERSION=${{ env.VERSION }}
          echo "Checking version pattern: $VERSION"
          if [[ $GITHUB_REF == "refs/heads/main" ]]; then
            echo "Already on main branch. Skipping merge check."
            exit 0
          fi
          
          # Extract major, minor, patch, and suffix parts
          MAJOR=${BASH_REMATCH[1]}
          MINOR=${BASH_REMATCH[2]}
          PATCH=${BASH_REMATCH[3]}
          SUFFIX=${BASH_REMATCH[4]}
          echo "Extracted Major: $MAJOR"
          echo "Extracted Minor: $MINOR"
          echo "Extracted Patch: $PATCH"
          echo "Extracted Suffix: $SUFFIX"
          
          # Check full release version pattern
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Full release version pattern matched."
          else
            echo "Full release version pattern NOT matched."
          fi

          # Check pre-release version pattern
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+-(a|b|rc)[0-9]+$ ]]; then
            echo "Pre-release version pattern matched."
          else
            echo "Pre-release version pattern NOT matched."
          fi

          # Check if invalid or development version
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+-(a|b|rc)[0-9]+$ ]]; then
            echo "Version is invalid or a development version. Cancelling workflow."
            exit 1
          fi

          # If it is a full release version, create a pull request to merge into main
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Version is a full release. Creating pull request to merge into main."
            echo "## Check for existing PR"
            if gh pr list --head development --base main --state open --json number --jq .[0].number; then
              echo "PR already exists."
              exit 0
            fi
            echo "Creating new PR."
            gh pr create --title "Release $VERSION" --body "Merging development into main for release $VERSION" --base main --head development
            exit 1
          fi

          # If it is a pre-release version, proceed with pre-release build
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+-(a|b|rc)[0-9]+$ ]]; then
            echo "Version is a pre-release. Proceeding with pre-release build."
          fi
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    if: github.ref == 'refs/heads/main' || (github.ref == 'refs/heads/Development' && needs.check-version-and-merge.outputs.VERSION != '')
    runs-on: windows-latest
    needs: check-version-and-merge

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.1
      #with: vs-version: '[16.4, 16.5)'

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}} -verbosity:minimal
      # BaseOutputPath should be /Solution/source/_Build/bin/Release/
      
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
        # Artifact name
        name: MenyooSP
        path: |
          Solution/source/_Build/bin/Release/
          !Solution/source/_Build/bin/Release/Trash/
          !Solution/source/_Build/bin/Release/*.map
  
    - name: Cancel Workflow Action if build fails
      uses: vishnudxb/cancel-workflow@v1.2
      if: failure()
      with:
        repo: MAFINS/MenyooSP
        workflow_id: ${{ github.run_id }}
        access_token: ${{ github.token }}


  pre-release:
    needs: build
    permissions: write-all
    name: "Pre Release"
    runs-on: windows-latest

    steps:
      #- name: Wait on artifact upload
        #uses: lewagon/wait-on-check-action@v1.1.2
        #with:
          #ref: ${{github.ref}}
          #check-name: 'Upload a Build Artifact'
          #repo-token: ${{ secrets.GITHUB_TOKEN }}
          #wait-interval: 10
          
      - uses: actions/checkout@v3

      #- name: Download workflow artifact
        #uses: dawidd6/action-download-artifact@v2.23.0
        #with:
         #github_token: ${{secrets.GITHUB_TOKEN}}
         #workflow_conclusion: ""
         #name: MenyooSP
         #skip_unpack: true
      - uses: actions/download-artifact@v3
     
      - name: Extract version from macros.h
        id: extract_version
        run: |
          Select-String -Path "Solution\source\macros.h" -Pattern '#define MENYOO_CURRENT_VER_' | ForEach-Object {
            $_.Line -match '#define MENYOO_CURRENT_VER_\s+"(.*?)"' | Out-Null
            $matches[1]
          } | Out-File -FilePath version.txt
          $VERSION = Get-Content version.txt
          echo "VERSION=$VERSION" >> $env:GITHUB_ENV
          echo "Extracted version: $VERSION"
          
      - name: Zip artifact for deployment
        run: Compress-Archive -Path "MenyooSP/*" -DestinationPath "MenyooSP.zip"
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ env.VERSION }}
          prerelease: ${{ github.ref_name != 'main' }}
          title: ${{ steps.version.outputs.version}}
          files: MenyooSP.zip
          dry-run: true
